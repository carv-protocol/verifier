// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/carv-protocol/verifier/internal/infra/data/model"
)

func newVerifier(db *gorm.DB, opts ...gen.DOOption) verifier {
	_verifier := verifier{}

	_verifier.verifierDo.UseDB(db, opts...)
	_verifier.verifierDo.UseModel(&model.Verifier{})

	tableName := _verifier.verifierDo.TableName()
	_verifier.ALL = field.NewAsterisk(tableName)
	_verifier.ID = field.NewInt32(tableName, "id")
	_verifier.AttestationID = field.NewString(tableName, "attestation_id")
	_verifier.CampaignID = field.NewString(tableName, "campaign_id")
	_verifier.BlockNumber = field.NewInt32(tableName, "block_number")
	_verifier.Address = field.NewString(tableName, "address")
	_verifier.TxHash = field.NewString(tableName, "tx_hash")
	_verifier.Status = field.NewString(tableName, "status")
	_verifier.CreateTime = field.NewTime(tableName, "create_time")
	_verifier.UpdateTime = field.NewTime(tableName, "update_time")

	_verifier.fillFieldMap()

	return _verifier
}

type verifier struct {
	verifierDo verifierDo

	ALL           field.Asterisk
	ID            field.Int32
	AttestationID field.String
	CampaignID    field.String
	BlockNumber   field.Int32
	Address       field.String
	TxHash        field.String
	Status        field.String
	CreateTime    field.Time
	UpdateTime    field.Time

	fieldMap map[string]field.Expr
}

func (v verifier) Table(newTableName string) *verifier {
	v.verifierDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v verifier) As(alias string) *verifier {
	v.verifierDo.DO = *(v.verifierDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *verifier) updateTableName(table string) *verifier {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt32(table, "id")
	v.AttestationID = field.NewString(table, "attestation_id")
	v.CampaignID = field.NewString(table, "campaign_id")
	v.BlockNumber = field.NewInt32(table, "block_number")
	v.Address = field.NewString(table, "address")
	v.TxHash = field.NewString(table, "tx_hash")
	v.Status = field.NewString(table, "status")
	v.CreateTime = field.NewTime(table, "create_time")
	v.UpdateTime = field.NewTime(table, "update_time")

	v.fillFieldMap()

	return v
}

func (v *verifier) WithContext(ctx context.Context) *verifierDo { return v.verifierDo.WithContext(ctx) }

func (v verifier) TableName() string { return v.verifierDo.TableName() }

func (v verifier) Alias() string { return v.verifierDo.Alias() }

func (v verifier) Columns(cols ...field.Expr) gen.Columns { return v.verifierDo.Columns(cols...) }

func (v *verifier) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *verifier) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 9)
	v.fieldMap["id"] = v.ID
	v.fieldMap["attestation_id"] = v.AttestationID
	v.fieldMap["campaign_id"] = v.CampaignID
	v.fieldMap["block_number"] = v.BlockNumber
	v.fieldMap["address"] = v.Address
	v.fieldMap["tx_hash"] = v.TxHash
	v.fieldMap["status"] = v.Status
	v.fieldMap["create_time"] = v.CreateTime
	v.fieldMap["update_time"] = v.UpdateTime
}

func (v verifier) clone(db *gorm.DB) verifier {
	v.verifierDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v verifier) replaceDB(db *gorm.DB) verifier {
	v.verifierDo.ReplaceDB(db)
	return v
}

type verifierDo struct{ gen.DO }

func (v verifierDo) Debug() *verifierDo {
	return v.withDO(v.DO.Debug())
}

func (v verifierDo) WithContext(ctx context.Context) *verifierDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v verifierDo) ReadDB() *verifierDo {
	return v.Clauses(dbresolver.Read)
}

func (v verifierDo) WriteDB() *verifierDo {
	return v.Clauses(dbresolver.Write)
}

func (v verifierDo) Session(config *gorm.Session) *verifierDo {
	return v.withDO(v.DO.Session(config))
}

func (v verifierDo) Clauses(conds ...clause.Expression) *verifierDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v verifierDo) Returning(value interface{}, columns ...string) *verifierDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v verifierDo) Not(conds ...gen.Condition) *verifierDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v verifierDo) Or(conds ...gen.Condition) *verifierDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v verifierDo) Select(conds ...field.Expr) *verifierDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v verifierDo) Where(conds ...gen.Condition) *verifierDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v verifierDo) Order(conds ...field.Expr) *verifierDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v verifierDo) Distinct(cols ...field.Expr) *verifierDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v verifierDo) Omit(cols ...field.Expr) *verifierDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v verifierDo) Join(table schema.Tabler, on ...field.Expr) *verifierDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v verifierDo) LeftJoin(table schema.Tabler, on ...field.Expr) *verifierDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v verifierDo) RightJoin(table schema.Tabler, on ...field.Expr) *verifierDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v verifierDo) Group(cols ...field.Expr) *verifierDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v verifierDo) Having(conds ...gen.Condition) *verifierDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v verifierDo) Limit(limit int) *verifierDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v verifierDo) Offset(offset int) *verifierDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v verifierDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *verifierDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v verifierDo) Unscoped() *verifierDo {
	return v.withDO(v.DO.Unscoped())
}

func (v verifierDo) Create(values ...*model.Verifier) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v verifierDo) CreateInBatches(values []*model.Verifier, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v verifierDo) Save(values ...*model.Verifier) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v verifierDo) First() (*model.Verifier, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Verifier), nil
	}
}

func (v verifierDo) Take() (*model.Verifier, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Verifier), nil
	}
}

func (v verifierDo) Last() (*model.Verifier, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Verifier), nil
	}
}

func (v verifierDo) Find() ([]*model.Verifier, error) {
	result, err := v.DO.Find()
	return result.([]*model.Verifier), err
}

func (v verifierDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Verifier, err error) {
	buf := make([]*model.Verifier, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v verifierDo) FindInBatches(result *[]*model.Verifier, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v verifierDo) Attrs(attrs ...field.AssignExpr) *verifierDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v verifierDo) Assign(attrs ...field.AssignExpr) *verifierDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v verifierDo) Joins(fields ...field.RelationField) *verifierDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v verifierDo) Preload(fields ...field.RelationField) *verifierDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v verifierDo) FirstOrInit() (*model.Verifier, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Verifier), nil
	}
}

func (v verifierDo) FirstOrCreate() (*model.Verifier, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Verifier), nil
	}
}

func (v verifierDo) FindByPage(offset int, limit int) (result []*model.Verifier, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v verifierDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v verifierDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v verifierDo) Delete(models ...*model.Verifier) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *verifierDo) withDO(do gen.Dao) *verifierDo {
	v.DO = *do.(*gen.DO)
	return v
}
