// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: gasless/gasless.proto

package gasless

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGasslessExplorerReplacedNode = "/api.gasless.Gassless/ExplorerReplacedNode"
const OperationGasslessExplorerSendTxModifyCommissionRate = "/api.gasless.Gassless/ExplorerSendTxModifyCommissionRate"
const OperationGasslessExplorerSendTxNodeEnter = "/api.gasless.Gassless/ExplorerSendTxNodeEnter"
const OperationGasslessExplorerSendTxNodeExit = "/api.gasless.Gassless/ExplorerSendTxNodeExit"
const OperationGasslessExplorerSendTxNodeReportVerification = "/api.gasless.Gassless/ExplorerSendTxNodeReportVerification"
const OperationGasslessExplorerSendTxSetRewardClaimer = "/api.gasless.Gassless/ExplorerSendTxSetRewardClaimer"

type GasslessHTTPServer interface {
	ExplorerReplacedNode(context.Context, *ExplorerReplacedNodeRequest) (*ExplorerReplacedNodeResponse, error)
	ExplorerSendTxModifyCommissionRate(context.Context, *ExplorerSendTxModifyCommissionRateRequest) (*Response, error)
	ExplorerSendTxNodeEnter(context.Context, *ExplorerSendTxNodeEnterRequest) (*Response, error)
	ExplorerSendTxNodeExit(context.Context, *ExplorerSendTxNodeExitRequest) (*Response, error)
	ExplorerSendTxNodeReportVerification(context.Context, *ExplorerSendTxNodeReportVerificationRequest) (*Response, error)
	ExplorerSendTxSetRewardClaimer(context.Context, *ExplorerSendTxSetRewardClaimerRequest) (*Response, error)
}

func RegisterGasslessHTTPServer(s *http.Server, srv GasslessHTTPServer) {
	r := s.Route("/")
	r.POST("/explorer_alphanet/send_tx_node_enter", _Gassless_ExplorerSendTxNodeEnter0_HTTP_Handler(srv))
	r.POST("/explorer_alphanet/send_tx_node_exit", _Gassless_ExplorerSendTxNodeExit0_HTTP_Handler(srv))
	r.POST("/explorer_alphanet/send_tx_modify_commission_rate", _Gassless_ExplorerSendTxModifyCommissionRate0_HTTP_Handler(srv))
	r.POST("/explorer_alphanet/send_tx_set_reward_claimer", _Gassless_ExplorerSendTxSetRewardClaimer0_HTTP_Handler(srv))
	r.POST("/explorer_alphanet/send_tx_node_report_verification", _Gassless_ExplorerSendTxNodeReportVerification0_HTTP_Handler(srv))
	r.GET("/explorer_alphanet/replaced_node", _Gassless_ExplorerReplacedNode0_HTTP_Handler(srv))
}

func _Gassless_ExplorerSendTxNodeEnter0_HTTP_Handler(srv GasslessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExplorerSendTxNodeEnterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGasslessExplorerSendTxNodeEnter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExplorerSendTxNodeEnter(ctx, req.(*ExplorerSendTxNodeEnterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Response)
		return ctx.Result(200, reply)
	}
}

func _Gassless_ExplorerSendTxNodeExit0_HTTP_Handler(srv GasslessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExplorerSendTxNodeExitRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGasslessExplorerSendTxNodeExit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExplorerSendTxNodeExit(ctx, req.(*ExplorerSendTxNodeExitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Response)
		return ctx.Result(200, reply)
	}
}

func _Gassless_ExplorerSendTxModifyCommissionRate0_HTTP_Handler(srv GasslessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExplorerSendTxModifyCommissionRateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGasslessExplorerSendTxModifyCommissionRate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExplorerSendTxModifyCommissionRate(ctx, req.(*ExplorerSendTxModifyCommissionRateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Response)
		return ctx.Result(200, reply)
	}
}

func _Gassless_ExplorerSendTxSetRewardClaimer0_HTTP_Handler(srv GasslessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExplorerSendTxSetRewardClaimerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGasslessExplorerSendTxSetRewardClaimer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExplorerSendTxSetRewardClaimer(ctx, req.(*ExplorerSendTxSetRewardClaimerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Response)
		return ctx.Result(200, reply)
	}
}

func _Gassless_ExplorerSendTxNodeReportVerification0_HTTP_Handler(srv GasslessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExplorerSendTxNodeReportVerificationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGasslessExplorerSendTxNodeReportVerification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExplorerSendTxNodeReportVerification(ctx, req.(*ExplorerSendTxNodeReportVerificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Response)
		return ctx.Result(200, reply)
	}
}

func _Gassless_ExplorerReplacedNode0_HTTP_Handler(srv GasslessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExplorerReplacedNodeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGasslessExplorerReplacedNode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExplorerReplacedNode(ctx, req.(*ExplorerReplacedNodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExplorerReplacedNodeResponse)
		return ctx.Result(200, reply)
	}
}

type GasslessHTTPClient interface {
	ExplorerReplacedNode(ctx context.Context, req *ExplorerReplacedNodeRequest, opts ...http.CallOption) (rsp *ExplorerReplacedNodeResponse, err error)
	ExplorerSendTxModifyCommissionRate(ctx context.Context, req *ExplorerSendTxModifyCommissionRateRequest, opts ...http.CallOption) (rsp *Response, err error)
	ExplorerSendTxNodeEnter(ctx context.Context, req *ExplorerSendTxNodeEnterRequest, opts ...http.CallOption) (rsp *Response, err error)
	ExplorerSendTxNodeExit(ctx context.Context, req *ExplorerSendTxNodeExitRequest, opts ...http.CallOption) (rsp *Response, err error)
	ExplorerSendTxNodeReportVerification(ctx context.Context, req *ExplorerSendTxNodeReportVerificationRequest, opts ...http.CallOption) (rsp *Response, err error)
	ExplorerSendTxSetRewardClaimer(ctx context.Context, req *ExplorerSendTxSetRewardClaimerRequest, opts ...http.CallOption) (rsp *Response, err error)
}

type GasslessHTTPClientImpl struct {
	cc *http.Client
}

func NewGasslessHTTPClient(client *http.Client) GasslessHTTPClient {
	return &GasslessHTTPClientImpl{client}
}

func (c *GasslessHTTPClientImpl) ExplorerReplacedNode(ctx context.Context, in *ExplorerReplacedNodeRequest, opts ...http.CallOption) (*ExplorerReplacedNodeResponse, error) {
	var out ExplorerReplacedNodeResponse
	pattern := "/explorer_alphanet/replaced_node"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGasslessExplorerReplacedNode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GasslessHTTPClientImpl) ExplorerSendTxModifyCommissionRate(ctx context.Context, in *ExplorerSendTxModifyCommissionRateRequest, opts ...http.CallOption) (*Response, error) {
	var out Response
	pattern := "/explorer_alphanet/send_tx_modify_commission_rate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGasslessExplorerSendTxModifyCommissionRate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GasslessHTTPClientImpl) ExplorerSendTxNodeEnter(ctx context.Context, in *ExplorerSendTxNodeEnterRequest, opts ...http.CallOption) (*Response, error) {
	var out Response
	pattern := "/explorer_alphanet/send_tx_node_enter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGasslessExplorerSendTxNodeEnter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GasslessHTTPClientImpl) ExplorerSendTxNodeExit(ctx context.Context, in *ExplorerSendTxNodeExitRequest, opts ...http.CallOption) (*Response, error) {
	var out Response
	pattern := "/explorer_alphanet/send_tx_node_exit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGasslessExplorerSendTxNodeExit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GasslessHTTPClientImpl) ExplorerSendTxNodeReportVerification(ctx context.Context, in *ExplorerSendTxNodeReportVerificationRequest, opts ...http.CallOption) (*Response, error) {
	var out Response
	pattern := "/explorer_alphanet/send_tx_node_report_verification"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGasslessExplorerSendTxNodeReportVerification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GasslessHTTPClientImpl) ExplorerSendTxSetRewardClaimer(ctx context.Context, in *ExplorerSendTxSetRewardClaimerRequest, opts ...http.CallOption) (*Response, error) {
	var out Response
	pattern := "/explorer_alphanet/send_tx_set_reward_claimer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGasslessExplorerSendTxSetRewardClaimer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
